service: example-stepf-nodejs

provider:
  name: aws
  runtime: nodejs6.10
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:*"
        - "s3:*"
      Resource:
        - "*"
custom:
  stepFunctionsOffline:
    StartEC2: startEC2
    WriteS3: writeS3
        
functions:
  startEC2:
    handler: ../brahma/lib/transformers/sd.handler
    name: StartEC2
  writeS3:
    handler: ec2.writeS3

stepFunctions:
  stateMachines:
    hellostepfunc1:
      events:
        - http:
            path: startEC2
            method: post
      definition:
        Comment: "A sample application"
        StartAt: StartEC2
        States:
          StartEC2:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-startEC2.sync"
            Next: WriteS3
          WriteS3:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-writeS3"
            End: true

plugins:
    - serverless-step-functions
    - serverless-pseudo-parameters
    - serverless-step-functions-offline